#!/usr/bin/perl -w

#
#   $Id: msktutil.interactive 42 2006-08-03 16:28:20Z finley $
#    vi:set filetype=perl:
#

################################################################################
#
#   Use stuff
#
use strict;
use File::Basename;
use vars qw($VERSION $quiet);

#
################################################################################


################################################################################
#
#   Variables
#
my $progname = basename($0);
my $progdir = dirname($0);
my $progpath;

our %o;
my $cache_file = "$ENV{HOME}/.$progname.cache";
my $config_file = undef;

# Linux or Unix?
if(`uname -s` =~ m/linux/i) {
    $o{os} = 'Linux';
} else {
    $o{os} = 'Unix';
}

#
################################################################################


################################################################################
#
#   Main
#

# XXX put getopts here

read_config_file($cache_file);
#
# Must read specified config file second, as it will override cache info. -BEF-
if( defined($config_file) ) {
    if(-r $config_file) {
        read_config_file($config_file);

    } else {
        print "ERROR:  The config file you specified doesn't exist,\n";
        print "        or I don't have permission to read it.\n";
        exit 1;
    }
}


my $satisfied = 'no';
until($satisfied =~ m/^(y|yes)$/i) {
    query_user();
    print "\nAre you satisfied? [$satisfied]: ";
    $satisfied = get_response($satisfied);
}


# if msktutil is in same dir use it 
if ( -r "${progdir}/msktutil" ) {
		$progpath = "${progdir}/";
} else {
		$progpath = "";
}

my $cmd = qq(${progpath}msktutil);
$cmd .= qq( $o{options}) if($o{options} ne '');
$cmd .= qq( -b "$o{base}");
$cmd .= qq( -k $o{keytab});
$cmd .= qq( -h $o{hostname});
$cmd .= qq( -s $o{service});
$cmd .= qq( --upn $o{upn}) if($o{upn} ne '');
$cmd .= qq( --computer-name $o{computername});
$cmd .= qq( $o{extop});

print "\n";
print "Here is the command I've put together based on your input:\n";
print "\n";
print "  $cmd\n";
print "\n";
print "Shall I run it for you? [no]: ";
my $run_it = get_response('no');
if($run_it =~ m/^(y|yes)$/i) {
    !system($cmd) or die("Couldn't run\n  $cmd");
}

write_cache_file($cache_file);

exit 0;

#
################################################################################


################################################################################
#
#   Subroutines
#

#
# Usage:
#   $value = get_thing('thing_type');
#
# Ie:
#   $division = get_thing('division', ['default_value'[,'case']]);
#
sub get_thing {

    my $thing = shift;
    my $default = shift;
    my $case = shift;

    if(! defined($default) )    { $default = 'x'; }
    if(! defined($case) )       { $case = 'ucfirst'; }

    my $i;
    if( defined($o{$thing}) ) {
       $i = $o{$thing};
    } else {
        $i = $default;
    }
    chomp $i;

    if($case eq 'upper') {
        $thing = uc($thing);
    } elsif($case eq 'lower') {
        $thing = lc($thing);
    } else {
        $thing = ucfirst($thing);
    }

    print "  $thing [$i]: ";
    return get_response($i);
}


sub get_keytab {

    my $i;
    if( defined($o{keytab}) ) {
        $i = $o{keytab};

    } else {
        my @possible_dirs = (
            '/etc/krb5',
            '/etc',
            '/krb5',
        );

        my @possible_keytabs = (
            'krb5.keytab',
            'v5srvtab',
        );

        #
        # And see if a keytab file exists there on the local machine.
        foreach my $dir (@possible_dirs) {
            foreach my $k (@possible_keytabs) {
                my $file = "$dir/$k";
                if(-f $file) { 
                    #
                    # found it!
                    $i = $file;
                    last;
                }
            }
        }

        #
        # If we couldn't find a keytab file, see if we can figure out where
        # it should go.
        my $dir;
        if(! defined($i) ) {
            #
            # Choose a resonable default as a suggestion
            foreach (@possible_dirs) {
                $dir = $_;
                my $file = "$dir/krb5.conf";
                last if(-f $file);
            }

            if($dir eq '/krb5') {
                $i = "$dir/v5srvtab";
            } else {
                $i = "$dir/krb5.keytab";
            }
        }

    }


    # Minor clean up if needed.
    chomp $i;
    $i =~ s/\s+//g;

    print "  Keytab [$i]: ";
    return get_response($i);
}


sub get_mac {

    my $i;
    if( defined($o{mac}) ) {
        $i = $o{mac};
    } else {
        if( $o{os} =~ m/Linux/ ) {
            $i = `ifconfig | grep HWaddr | head -1 | sed -e"s/^.*HWaddr //"`;

        } else {
            $i = `ifconfig -a | grep ether | head -1 | sed -e"s/^.*ether //"`;
        }
    }

    # Minor clean up if needed.
    chomp $i;
    $i =~ s/\s+//g;

    print "  MAC [$i]: ";
    return get_response($i);
}


sub get_computername {

    my $i;
    if( defined($o{computername}) ) {
        $i = $o{computername};
    } else {
        $_ = $o{hostname};
        my ($a, $b) = split(/\./);
        my $prefix;
        if($o{service} eq "host") {
           $prefix = "h"; 
        } else {
           $prefix = $o{service};
        }
        $i = $prefix . "-" . $a . "-" . $b;
    }
    my $max_length = 18;
    if( length($i) gt $max_length) {
        $i = substr($i, 0, $max_length);
    }
    chomp $i;
    $i =~ s/-+$//;

    print "  Computername [$i]: ";
    return get_response($i);
}


sub get_hostname {

    my $i;
    if( defined($o{hostname}) ) {
        $i = $o{hostname};
    } else {
        if( $o{os} =~ m/Linux/ ) {
            $i = `hostname -f`;
        } else {
            $i = `hostname`;
        }
    }
    chomp $i;

    print "  Hostname [$i]: ";
    return get_response($i);
}


#
# Usage:
#   $answer = get_response($answer);
#
sub get_response {

    my $garbage_out=$_[0];
    my $garbage_in=<STDIN>;

    chomp $garbage_out;
    chomp $garbage_in;

    unless($garbage_in eq "") { 
        $garbage_out = $garbage_in; 
    }

    return $garbage_out;
}


sub read_config_file {

    my $file = shift;

    if(! -e $file) {
        # Cache file doesn't exist yet.  That's OK.  I presume it's a cache 
        # file -- a config file should be tested for prior to invoking this 
        # function earlier. -BEF-
        return 1;
    }

    open(FILE,"<$file") or die("Couldn't open $file for reading.");
        while(<FILE>) {
            next if(m/^(\s+|#|$)/);
            chomp;
            my ($var, $val) = split(/=/, $_, 2);
            #
            # Ensure that the variable is lowercase.
            $var = lc($var);
            $o{$var} = $val;
        }
    close(FILE);

    return 1;
}


sub get_admin {

    my $thing = 'admin';
    my $default = shift;
    my $case = shift;

    if(! defined($default) )    { $default = 'x'; }
    if(! defined($case) )       { $case = 'ucfirst'; }

    my $i;
    if( defined($o{$thing}) ) {
       $i = $o{$thing};
    } else {
        $i = $default;
    }
    chomp $i;
    $i =~ s/\s+/_/g;

    if($case eq 'upper') {
        $thing = uc($thing);
    } elsif($case eq 'lower') {
        $thing = lc($thing);
    } else {
        $thing = ucfirst($thing);
    }

    print "  $thing [$i]: ";
    return get_response($i);
}


sub write_cache_file {

    my $file = shift;

    #
    # Don't cache certain bits.  Delete, rather than simply skipping,
    # so that we ensure they don't end up in the cache file. -BEF-
    delete $o{mac};
    delete $o{hostname};
    delete $o{computername};
    delete $o{csi};
    delete $o{os};

    open(FILE,">$file") or die("Couldn't open $file for writing.");
    foreach my $var (keys %o) {
        #
        # Write it out.
        print FILE $var . "=" . $o{$var} . "\n";
    }
    close(FILE);

    return 1;
}


sub query_user {
        print "\n";
        print "Please verify the following information:\n";
        print "--------------------------------------------------------------------------------\n";
        $o{hostname}    = get_hostname();

        #
        # Service name to be created or added to the keytab.  Examples include 
        # host, HTTP, afs, and cvs.  Typically a hosts keytab file only includes
        # the 'host' service. 
        #
        $o{service}     = get_thing('service','host');

        $o{computername} = get_computername();
#        $o{division}    = get_thing('division');
#        $o{building}    = get_thing('building');
#        $o{room}        = get_thing('room');
#        $o{csi}         = get_thing('csi','x','upper');
#        print qq(  >> Admin: use a group name if possible <<\n);
#        $o{admin}       = get_admin();
#        $o{switch}      = get_thing('switch');
#        $o{port}        = get_thing('port');
#        $o{mac}         = get_mac();
#        $o{description} = "$o{division} $o{building} $o{room} $o{csi} $o{admin} $o{switch} $o{port} $o{mac}";
        $o{base}        = get_thing('base',"OU=o$o{os},OU=ouCIS,OU=OPSDIVS,OU=EmployeeOrganizations");
        $o{keytab}      = get_keytab();
#        print qq(  >> UPN: typically auto-determined based on Hostname <<\n);
#        $o{upn}         = get_thing('upn','','upper');

        #
        # Other options/extopts that can be added:
        #	--des-only  --disable-des-only
        #	--no-pac    --disable-no-pac
        #	--delegation --disable-delegation
        #   --enctypes n   decimal number for msDS-supportedEncryptionTypes
        #                  3 - is DES only
        #                  7 - is default, DES+RC4
        #                 28 - AES256, AES128 and RC4 
        #   --server dc-hostname  Uses this server
        #   --verbose    to get more output, entry twice to get ldap debug
        #
        # Notes: delegation requires special privilages in AD. 
        #        -des-only and -enctypes are mutually exclusive
        #	
		print qq(  >> Some options: --delegation and --enctypes 28 are typical << \n);
        $o{options}     = get_thing('options','');
		print qq(  >>  --verbose --server AD_servername << \n);
        $o{extop}       = get_thing('extop','');
}


#
################################################################################
